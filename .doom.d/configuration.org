#+TITLE: My Literate Config File

** Misc Doom Config Vars
*** My Details

#+begin_src emacs-lisp
(setq user-full-name "Sam Barrett"
      user-mail-address "barrett370@gmail.com")
#+end_src
*** Doom Config
#+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(setq ispell-dictionary "british-ise")
(setq doom-theme 'doom-one)
(setq org-directory "~/org/")
(global-linum-mode 0)
(setq display-line-numbers-type t)
(setq doom-font (font-spec :family "FiraCode" :size 18))
#+end_src
**** Here are some additional functions/macros that could help you configure Doom:

   - `load!' for loading external *.el files relative to this one
   - `use-package!' for configuring packages
   - `after!' for running code after a package has loaded
   - `add-load-path!' for adding directories to the `load-path', relative to
     this file. Emacs searches the `load-path' when you load packages with
     `require' or `use-package'.
   - `map!' for binding new keys

   To get information about any of these functions/macros, move the cursor over
   the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
   This will open documentation for it, including demos of how they are used.

   You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
   they are implemented.
**** Tab setup etc.
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq c-set-style "k&r")
(setq c-basic-offset 4)
#+end_src
**** Treemacs ignores
#+begin_src emacs-lisp
(setq treemacs-file-ignore-extensions
      '(;; LaTeX
        "aux"
        "ptc"
        "fdb_latexmk"
        "fls"
        "synctex.gz"
        "toc"
        ;; LaTeX - glossary
        "glg"
        "glo"
        "gls"
        "glsdefs"
        "ist"
        "acn"
        "acr"
        "alg"
        ;; LaTeX - pgfplots
        "mw"
        ;; LaTeX - pdfx
        "pdfa.xmpi"
        ))
(setq treemacs-file-ignore-globs
      '(;; LaTeX
        "*/_minted-*"
        ;; AucTeX
        "*/.auctex-auto"
        "*/_region_.log"
        "*/_region_.tex"))
#+end_src
**** Opacity

#+begin_src emacs-lisp
;;(set-frame-parameter (selected-frame) 'alpha '(85 . 50))
;;(add-to-list 'default-frame-alist '(alpha . (85 . 50)))
#+end_src

**** Evil window & buffer navigation keybinds

#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "C-h") #'evil-window-left)
(define-key evil-normal-state-map (kbd "C-j") #'evil-window-down)
(define-key evil-normal-state-map (kbd "C-k") #'evil-window-up)
(define-key evil-normal-state-map (kbd "C-l") #'evil-window-right)

(define-key evil-normal-state-map (kbd "M-l") #'next-buffer)
(define-key evil-normal-state-map (kbd "M-h") #'previous-buffer)

(define-key evil-normal-state-map (kbd "M-C-l") #'enlarge-window-horizontally)
(define-key evil-normal-state-map (kbd "M-C-h") #'shrink-window-horizontally)
(define-key evil-normal-state-map (kbd "M-C-j") #'enlarge-window)
(define-key evil-normal-state-map (kbd "M-C-k") #'shrink-window)
#+end_src
**** Justfile syntax
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("Justfile" . makefile-mode))
#+end_src
*** Remove annoying ligatures:

** \LaTeX Config

#+begin_src emacs-lisp
(setq +latex-viewers '(zathura))
(setq LaTeX-command-style '(("" "%(PDF)%(latex) -shell-escape %S%(PDFout)")))
;(add-hook 'LaTeX-mode-hook 'latex-preview-pane-mode)
#+end_src

*** Preview environments in buffer
#+begin_src emacs-lisp
(eval-after-load "preview"
  '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{tikzpicture}" t)
  )
(eval-after-load "preview"
  '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{prooftree}" t)
  )
(eval-after-load "preview"
  '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{minted}" t)
  )
(eval-after-load "preview"
  '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{enumerate}" t)
  )
(eval-after-load "preview"
  '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{itemize}" t)
  )
#+end_src
*** Compilation command
#+begin_src emacs-lisp
(setq pdf-latex-command "/home/sam/.scripts/latexcompile.sh")
#+end_src
*** Surround quotes for LaTeX
#+begin_src emacs-lisp
(after! evil-surround
  (add-hook 'latex-mode (lambda ()
                           (push '(?\" . ("``" . "''")) evil-surround-pairs-alist)))
  (add-hook 'latex-mode (lambda ()
                           (push '(?i . ("\textit{" . "}")) evil-surround-pairs-alist)))
)
#+end_src
** Org Configuration

*** Capture Templates
#+begin_src emacs-lisp
(after! org
  (add-to-list 'org-capture-templates
             '("J" "New Job application" entry
               (file "~/org/job-applications.org" )
               "\n* APPLIED Company: %^{name} \nDate: %U \nRole: [[%^{title}][%^{url}]] \nNotes: %? \n")
             )
  )
(after! org
  (add-to-list 'org-capture-templates
             '("l" "New weekly log" plain
               (file (lambda ()
                       (concat
                        (concat "~/git-clones/Y4-Diss/research/logs/log-"
                                (org-read-date nil nil "-mon" nil nil ))
                        ".org")))
               "#+TITLE: Log Week %^{weeknumber} \n#+OPTIONS: toc:nil \n\n %?"
               )
             )
  )
(after! org
  (add-to-list 'org-capture-templates
               '("T" "Task" entry (file+headline "/home/sam/org/notes.org" "Tasks") "* TODO %?
  %u
  %a" :prepend t)))

#+end_src

*** Todo Keywords
#+begin_src emacs-lisp
(after! org
  (add-to-list 'org-todo-keywords
        '(sequence "APPLIED(a)" "INTERVIEW(i)" "OFFER(o)" "|" "ACCEPTED(y)" "REJECTED(r)" "NORESPONSE(n)")
        )
  (add-to-list 'org-todo-keyword-faces
               '("APPLIED" . "yellow")
               )
  (add-to-list 'org-todo-keyword-faces
               '("INTERVIEW" . "blue")
               )
  (add-to-list 'org-todo-keyword-faces
               '("OFFER" . "teal")
               )
  (add-to-list 'org-todo-keyword-faces
               '("ACCEPTED" . "green")
               )
  (add-to-list 'org-todo-keyword-faces
               '("REJECTED" . "red")
               )
  (add-to-list 'org-todo-keyword-faces
               '("NORESPONSE" . "red")
               )
  )

#+end_src
*** Job Application Table generation
#+begin_src emacs-lisp
(defun update-job-table ()
  (interactive)
  (shell-command "/home/sam/.scripts/jobapps2table.py > /home/sam/org/jobappstable.org")
  (progn
    (find-file "/home/sam/org/jobappstable.org")
    (org-table-iterate-buffer-tables)
    (goto-line 4)
    (org-table-goto-column 3)
    (org-table-sort-lines nil ?t)
    (save-buffer)
    )
  )
#+end_src

*** Pretty bullets
#+begin_src emacs-lisp
(setq
    org-superstar-headline-bullets-list '("⁖" "◉" "○" "✸" "✿")
)
#+end_src
*** Hide line numbers when in demo-it mode
#+begin_src emacs-lisp
(defun nolinum ()
  (global-linum-mode 0)
)
(add-hook 'demo-it-mode-adv-hook 'nolinum   )
#+end_src
*** org-tree-slide settings
#+begin_src emacs-lisp
(setq org-tree-slide-header nil)
(setq org-tree-slide-slide-in-effect nil)
#+end_src
** Matlab Config
#+begin_src emacs-lisp
(setq matlab-shell-command "start-matlab.sh")
(setq matlab-shell-command-switches (list "-nodesktop"))
#+end_src
fatal: not a git repository (or any of the parent directories): .git
fatal: not a git repository (or any of the parent directories): .git
fatal: not a git repository (or any of the parent directories): .git
** Julia Config
*** Language server configuration
#+begin_src emacs-lisp
(after! lsp-julia
    (setq lsp-julia-default-environment "~/.julia/environments/v1.5/")
)
#+end_src
